<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Netty实现心跳处理</title>
    <url>/2021/03/06/Netty%E5%AE%9E%E7%8E%B0%E5%BF%83%E8%B7%B3%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在Socket通信中为了保证Server和Client连接的有效,一般会使用心跳来检测Server和Client通信是否畅通.</p>
<h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><ol>
<li>心跳处理handler<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.whymesay.toy.monarch.transport.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.whymesay.toy.monarch.common.domain.Message;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.timeout.IdleStateEvent;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 心跳处理 每个客户端连接的channel 都有一个handler实例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> whymesay cyhyx521@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/3 17:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartbeatServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Message</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * timeout count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger timeoutCount = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, Message msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        timeoutCount.set(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (msg.getType() == Message.PING) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;receive client heartbeat&quot;</span>);</span><br><span class="line">            ctx.writeAndFlush(Message.PONG_MSG);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> IdleStateEvent) &#123;</span><br><span class="line">            <span class="comment">// 如果是心跳消息 超过时间客户端没有连接 下线</span></span><br><span class="line">            handlerHeartbeatTimeout(ctx);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.userEventTriggered(ctx, evt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * handler heartbeat timeout</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx ctx</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handlerHeartbeatTimeout</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// todo 处理</span></span><br><span class="line">        <span class="keyword">if</span> (timeoutCount.getAndIncrement() &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">            ctx.close();</span><br><span class="line">            log.warn(<span class="string">&quot;monarch timeout count more than 5,close!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;monarch timeout, count: &#123;&#125;&quot;</span>, timeoutCount.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>注册Server Handler,配置IdleStateHandler</li>
</ol>
<p>服务端需要添加IdleStateHandler,并且配置读取超时时间,超过时间没有获取到客户端的消息,触发event</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多余的代码省略,具体代码可以查看底部的github地址</span></span><br><span class="line">       socketChannel.pipeline()</span><br><span class="line">               <span class="comment">// when idle , send  heartbeat</span></span><br><span class="line">               .addLast(<span class="string">&quot;IdleStateHandler&quot;</span>, <span class="keyword">new</span> IdleStateHandler(MonarchConstant.HEART_BEAT_TIME_OUT * MonarchConstant.HEART_BEAT_TIME_OUT_MAX_TIME, <span class="number">0</span>, <span class="number">0</span>, TimeUnit.SECONDS))</span><br><span class="line">               <span class="comment">// byte to message</span></span><br><span class="line">               .addLast(<span class="string">&quot;MonarchDecoder&quot;</span>, <span class="keyword">new</span> MonarchDecoder(globalConfig.getSerializeConfig()))</span><br><span class="line">               <span class="comment">// message to byte</span></span><br><span class="line">               .addLast(<span class="string">&quot;MonarchEncoder&quot;</span>, <span class="keyword">new</span> MonarchEncoder(globalConfig.getSerializeConfig()))</span><br><span class="line">               <span class="comment">// heartbeat</span></span><br><span class="line">               .addLast(<span class="string">&quot;HeartbeatServerHandler&quot;</span>, <span class="keyword">new</span> HeartbeatServerHandler())</span><br><span class="line">               .addLast(<span class="string">&quot;MonarchServerHandler&quot;</span>, <span class="keyword">new</span> MonarchServerHandler(<span class="keyword">this</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><ol>
<li>Client Handler</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.whymesay.toy.monarch.transport.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.whymesay.toy.monarch.common.domain.Message;</span><br><span class="line"><span class="keyword">import</span> com.github.whymesay.toy.monarch.transport.monarch.constant.MonarchConstant;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.timeout.IdleStateEvent;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 心跳处理 每个客户端连接的channel 都有一个handler实例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> whymesay cyhyx521@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/3 17:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartbeatClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Message</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * timeout count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger timeoutCount = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, Message msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        timeoutCount.set(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (msg.getType() == Message.PONG) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;receive server heartbeat&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> IdleStateEvent) &#123;</span><br><span class="line">            <span class="comment">// 如果是心跳消息 超过时间客户端没有请求服务端</span></span><br><span class="line">            handlerHeartbeatTimeout(ctx);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.userEventTriggered(ctx, evt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * handler heartbeat timeout</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx ctx</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handlerHeartbeatTimeout</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timeoutCount.getAndIncrement() &gt;= MonarchConstant.HEART_BEAT_TIME_OUT_MAX_TIME) &#123;</span><br><span class="line">            <span class="comment">//todo 当前连接以及断开 尝试重连</span></span><br><span class="line">            ctx.close();</span><br><span class="line">            log.warn(<span class="string">&quot;monarch timeout count more than &#123;&#125;,close!&quot;</span>, MonarchConstant.HEART_BEAT_TIME_OUT_MAX_TIME);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 超时未发送数据 客户端主动发送消息到server</span></span><br><span class="line">            ctx.writeAndFlush(Message.PING_MSG);</span><br><span class="line">            log.warn(<span class="string">&quot;monarch timeout, count: &#123;&#125;&quot;</span>, timeoutCount.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ol start="2">
<li>注册Client Handler,配置IdleStateHandler</li>
</ol>
<p>客户端和服务端基本相同,不同是我们需要配置IdleStateHandler的写超时,一旦没有向服务端发送消息,那么主动向服务端发起请求,说明自己还活着.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">socketChannel.pipeline()</span><br><span class="line">        .addLast(<span class="string">&quot;IdleStateHandler&quot;</span>, <span class="keyword">new</span> IdleStateHandler(<span class="number">0</span>, MonarchConstant.HEART_BEAT_TIME_OUT, <span class="number">0</span>))</span><br><span class="line">        <span class="comment">// byte to message</span></span><br><span class="line">        .addLast(<span class="string">&quot;MonarchDecoder&quot;</span>, <span class="keyword">new</span> MonarchDecoder(globalConfig.getSerializeConfig()))</span><br><span class="line">        <span class="comment">// message to byte</span></span><br><span class="line">        .addLast(<span class="string">&quot;MonarchEncoder&quot;</span>, <span class="keyword">new</span> MonarchEncoder(globalConfig.getSerializeConfig()))</span><br><span class="line">        .addLast(<span class="string">&quot;HeartbeatClientHandler&quot;</span>, <span class="keyword">new</span> HeartbeatClientHandler())</span><br><span class="line">        .addLast(<span class="string">&quot;MonarchClientHandler&quot;</span>, <span class="keyword">new</span> MonarchClientHandler(<span class="keyword">this</span>));</span><br></pre></td></tr></table></figure>

<h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><blockquote>
<p><a href="https://github.com/whymesay/toy-monarch/tree/master/src/main/java/com/github/whymesay/toy/monarch/transport/monarch">https://github.com/whymesay/toy-monarch/tree/master/src/main/java/com/github/whymesay/toy/monarch/transport/monarch</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>个人学习笔记</title>
    <url>/2021/01/17/%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>个人的一些学习记录,一些自己看过觉得不错,并且希望在之后回顾的时候能够快速的找到链接.</p>
<span id="more"></span>

<h2 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p><a href="https://www.cnblogs.com/yulinfeng/p/6602902.html">&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;移位操作</a></p>
<h3 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h3><p><a href="https://blog.csdn.net/maple_son/article/details/105026747">一篇，快速搞懂各种重试策略</a></p>
<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p><a href="https://juejin.cn/post/6844904008629354504">《浅入浅出》-RocketMQ</a></p>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p><a href="https://javadoop.com/post/java-thread-pool">深度解读 Java 线程池设计思想及源码实现</a><br><a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html">Java线程池实现原理及其在美团业务中的实践</a></p>
<h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p><a href="https://tech.meituan.com/2020/11/12/java-9-cms-gc.html">Java中9种常见的CMS GC问题分析与解决</a><br><a href="https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html">Java Garbage Collection Basics</a><br><a href="https://segmentfault.com/a/1190000021820577">面试官:你说你熟悉jvm?那你讲一下并发的可达性分析</a></p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h3><p><a href="https://tech.meituan.com/2014/08/20/innodb-lock.html">Innodb中的事务隔离级别和锁的关系</a><br><a href="https://tech.meituan.com/2016/11/18/dianping-order-db-sharding.html">大众点评订单系统分库分表实践</a><br><a href="https://juejin.cn/post/6844903944188067848">重学MySQL系列(一)：谈谈MySQL架构</a></p>
<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p><a href="https://juejin.cn/post/6844903874927525902">10分钟彻底理解Redis的持久化机制：RDB和AOF</a></p>
<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p><a href="https://juejin.cn/post/6917096816118857736">6w字搞定Linux基本操作，建议收藏</a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://mp.weixin.qq.com/s/6Nh9iufj31UAk2xcstM4qw">深入剖析配置中心的长轮询机制</a></p>
<h2 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h2><ul>
<li><a href="https://tech.meituan.com/">美团技术团队</a></li>
<li><a href="https://javadoop.com/">Javadoop</a></li>
</ul>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>资源来自互联网收集,侵删.</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>待看文章列表</title>
    <url>/2021/02/10/%E5%BE%85%E7%9C%8B%E6%96%87%E7%AB%A0%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="待看文章"><a href="#待看文章" class="headerlink" title="待看文章"></a>待看文章</h2><ol>
<li><a href="https://juejin.cn/post/6925217498723778568">全网最硬核 JVM TLAB 分析</a></li>
</ol>
<h2 id="待解决问题"><a href="#待解决问题" class="headerlink" title="待解决问题"></a>待解决问题</h2><ol>
<li>Spring循环依赖解决方案</li>
</ol>
]]></content>
  </entry>
</search>
